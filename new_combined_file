This is an edit on line 1
this is an edit on line 2 innit fam
one
two
three
four
five
six
seven
eight
nine
ten
11
I saw a rainbow yesterday!
making a change on master branch, tryna see if it is mirrored in new_combinend_file on branch_trial2

so a staged change on master will be mirrored on branch_trial2
but can unstage if I want, when I am on branch_trial2
confirmed committing is the confirmation step before pushing changes to remote repo
now tryna test if staged change made on branch_trial2 is mirrored on master without committing.

ah! so even if I make a change on branch_trial2, if it is staged when I am on the branch,
it is mirrored on the master branch, also without committing - very strange. 
question: what's the point of having a branch on the local repo then, if any staged changes will be mirrored.
wouldn't staging vs not staging be enough to distinguish between saved and unsaved changes?

now even tested that, unstaged changes made on master branch ALSO are mirrored on branch_trial2
let's try unstaged changes on branch_trial2

trying whether unstaged changes on branch_trial2 are mirrored onto master branch.

oh wow, so even unstaged changes made on branch are mirrored onto master branch!
so what's the point of having a branch on the local repo LOL maybe there isn't any point. Let's try merging now.

just deleted branch_trial2;
it didnt allow me to do so until I have staged the changes and checkout into the master branch (left the branch_trial2).
now there's only master left.
Now try merging now. 
I think if I can't directly merge at the remote repo, I need to make a branch, and pull the remote repo,
and do the merging locally, then push. we see.

okay, so it seems that when I push, somehow it says I don't have a remote repo to this current master branch
so I made the remote repo as the upstream and successfully pushed.
Altho I realise when I refreshed the remote repo, there's no new_combined_file, because I have never committed any changes!
I never did any merging action, unsure where I need it.
trying to commit now and push.

very interesting now.
the last paragraph is the change I forgot to stage. But then I commited (for the first time in this sesh).
then I pushed (without needing to set remote origin as upstream again -> so just 'git push'), and then it worked,
i.e. on the remote repo, refreshing, I can see the new_combined_file,
most fascinatingly, without the last paragraph! yay!
so now let's try to merge after committing all this changes - tryna work out the difference between merge and push.

just staged. it does seem that merge only applies for merging local branches, which I have none now apart from the master only.
coz I deleted the branch_trial2 already.
need to solve: what's the point of merging if even unstaged changes are mirrored across branches?

how very interesting! I just made branch_trial3 earlier, and just realised it did not have my last 2 paragraphs.
Maybe this means a new branch is only created to make a copy of the master from the remote repo?
I'll make another branch to test this

very interesting, I can't switch branch NOW unless I have committed my staged changes. 
i'll 1. create a new branch to see what it makes a copy of (branch_trial4)
and 2. I will commit these changes and see if it is mirrored onto branch_trial3 which currently does not have the last 3 (and this).

oh this is so interesting! so for 2. I have committed the changes, but they are NOT mirrored onto branch trial3! 
why was it mirrorred before? -- maybe because my master branch was not "linked" with the remote repo for some reason.
now gonna try 1.

omdzomdzomdzomdz this is so amazing
so I was on branch_trial3, making branch_trial4, expecting it to make a copy of the remote repo master, which ends on 'mirrored across branches?'
-> and turns out it made a copy of branch_trial3, which ends on ', then push. we see.'
then eureka moment so I went to the master branch, and made branch_trial5, and then boom, it made a copy of itself, which ends onn 'now gonna try 1.'
very nice.
Conclusion: a branch is a copy of the version in that branch you are currently on as you are making a new one.
now try to merge 4 and 5!

okay okay okay
so, when I try to type 'git merge branch_trial4 branch_trial5', it says everything is already updated.
but it is not? then I realised merge also depends on the branch you are CURRENTLY on
because I was doing it on the master branch, it thought everything was already up to date.
so I switched to branch_trial3, and then did 'git merge branch_trial5', and it worked!
i.e. branch_trial5(more) is merged with branch_trial3 (less), both ending with 'now gonna try 1.'
and branch_trial4 stayes the same, ending with ', then push. we see.'
Conclusion: merging does not need staging or committing. it merges the current branch you are on with the one you say you want to merge it with.
Is there any missing question?

INTERESTING: this is the real final. 
tried merging in different directions:
realised if I am on master (most things), and 'git merge branch_trial4', then 'already up to date.'
but if when I checkout to branch_trial4, and 'git merge master', then the merging happens.
Conclusion: the branch that I am CURRENTLY on, when I execute git merge, is the "BASIC" one I want to merge other files INTO.

final check if I commit staged changes here on the branch_trial4 that somehow are now not mirrored to the master branch, 
whether I will still able to delete branch_trial4 

well somehow, when I make a change that I haven't staged or committed on branch_trail4, 
somehow I can exit it and checkout into the master branch, but also that it is now mirrored into the master branch
let's try again if I have staged uncommitted changes on the master branch, whether I can switch branches and have it mirrored onto branch_trial4

how very interseting, now I can edit on both branches, and can switch, and the changes will have already been mirrored across branches.
which is not exactly what I want. really strange.
